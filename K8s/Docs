## Intro to Kubernetes | Container Tools For Beginners | Orchestration Tools 

# Kubernetes: Understanding Communities and Software Development

 To understand Kubernetes, we first need to understand how software development works. Why do we need communities in software development?
 This is an important question, but before we dive into that, we have to understand Docker because it's a prerequisite for Kubernetes.
 Let me know in the chat if you have any questions or if you are not familiar with Docker or Kubernetes so I can adjust my teaching accordingly.
 
## What is Docker?

Docker is a container-based software technology used in DevOps. It's important to note that Docker is not exactly like Kubernetes.
They are different but related technologies.

## Why Do We Need Communities in Software Development?

Communities are used extensively in DevOps, especially in software development where profits need to be made.
Kubernetes is commonly used for deployment, which is where the software goes to the end-users, customers or testers.
The tester takes this code and tests it for various things such as requirement testing and build process testing. 
The aim is to ensure that the code goes to the user without any issues.


## The Importance of Community

In software development, communities are often used for a specific purpose. Communities help to ensure that the code goes out to the users without any issues.
They also help to create a sense of empathy and understanding within teams, which can go a long way in making the development process smoother and more efficient.

## Understanding Containerization and Docker

If you're looking to understand Docker, you need to understand containerization first.
Essentially, containerization solves compatibility issues that can arise from different devices being involved in software development and delivery.
The developer might test their code on one laptop with certain tools, while the tester uses another, and the production environment is on a server.
Making sure the code behaves the same way in all of these environments can be tedious and difficult.

This is where containers come in. Think of containers as virtual boxes that can hold all the necessary parts of an application in a single, deployable unit. Using containers instead of directly pushing the code to different devices makes the building and deployment process easier and more consistent. Docker is a containerization tool, which allows you to secure the application in a container and send it for deployment.

Containers act like virtual machines, but aren't exactly the same thing
Docker swarm is an open-source orchestrator tool that can help implement microservices architecture

Microservices are used to manage multiple isolated containers, and Docker is a tool for creating and managing those containers. However, to efficiently manage those containers, orchestration tools like Kubernetes are needed. Images can be used as blueprints to define how the container will be run, and Ubuntu can be specified as the operating system. Kubernetes is a tool for monitoring Docker and offers dashboards for managing different aspects of microservices. Companies might use Docker Swarm for prototype reasons, but Kubernetes is generally preferred for orchestration.

Feel free to ask any questions, and we'll be happy to answer them. Raj asked if the video could be uploaded to YouTube, and we'll upload the live session. We'll also offer recordings of live sessions from September and December, and we welcome any song recommendations. Thanks for being a subscriber since 2013!

Virtual machines are essentially machines that are virtual, as the name suggests. They do not interact with the current Windows system, so if, for example, Ubuntu is installed in a virtual machine, it will run separately and will not directly affect the system. If you are not ready to watch the video now, you can subscribe and come back later to check on your subscription feed to watch the live sessions, which will help you out.

Some questions were asked, such as which service is used in AWS, and it is usually EKS. Different parameter values in each environment can be resolved using environment variables. AWS has many different services being developed by different teams. Kubernetes is an open source container orchestration tool that manages multiple containers and environments, while Docker Swarm is used primarily for containerization.

Windows Server was used as an example of how to use Windows on a container to install different tools or software. Kubernetes is a robust tool that provides stability and reduces downtime, making it a better option than Docker when it comes to security. The software uses a microservices architecture and storage distribution or handling of secrets.

Storage distribution refers to the effect on the system's storage, and availability of volumes can quickly resolve issues. It is important not to store data in the system and to utilize volumes to share data between containers.


## Kubernetes Architecture Overview

Kubernetes is used to manage three services through a community designed and built infrastructure. 
The architecture is organized into pods, which contain multiple containers running simultaneously.
It is important to not store data within containers and instead direct it to external volumes. 
Kubernetes can manage the sharing of these volumes across containers. Kubernetes is also responsible for storage distribution, secret handling, 
healing, load balancing, and easy scaling. Replicas of features are automatically deployed in case of downtime or failure. 
Kubernetes also comes with easy installation and setup.
